services:
  postgres:
    container_name: postgres
    image: postgis/postgis:16-3.5-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend_rewrite/tools/database/sauvegarde.dump:/docker-entrypoint-initdb.d/sauvegarde.dump
      - ./backend_rewrite/tools/database/restore.sh:/docker-entrypoint-initdb.d/01_restore.sh
    env_file:
      - ./settings/.database.env
    expose:
      - "5432"
    networks:
      - matcha-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 15s
      timeout: 30s
      retries: 5
      start_period: 15s
  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    env_file:
      - ./settings/.database.env
    expose:
      - "80"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - matcha-network
    healthcheck:
      test: ["CMD", "wget", "-O", "-", "http://localhost:80/misc/ping"]
      interval: 30s
      timeout: 30s
      retries: 10
      start_period: 30s
  flask-backend:
    container_name: flask-backend
    build:
      context: ./backend_rewrite
      dockerfile: Dockerfile
    env_file:
      - ./settings/.flask.env
      - ./settings/.database.env
    expose:
      - "5000"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - flask-backend_data:/app
    networks:
      - matcha-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5000/health"]
      interval: 10s
      timeout: 30s
      retries: 5
      start_period: 5s
  angular-frontend:
    container_name: angular-frontend
    mem_limit: 1.5g
    build:
      context: ./angular-frontend
      dockerfile: Dockerfile
    ports:
      - "8000:80"
    depends_on:
      flask-backend:
        condition: service_healthy
      pgadmin:
        condition: service_healthy
    networks:
      - matcha-network
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro

networks:
  matcha-network:
    driver: bridge
volumes:
  postgres_data:
  pgadmin_data:
  flask-backend_data: